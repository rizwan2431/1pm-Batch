DEVOPS LIFE CYCLE
=============

DevOps lifecycle is a combination of different phases of continuous software development, integration, testing, deployment, and monitoring.

The DevOps approach embraces continuous innovation, agility, and scalability to build, test, consume, and evolve software products. 
It promotes a culture of experimentation, feedback, and constant learning to reinvent products, services, and processes. 

To implement DevOps, a proper understanding of different phases of the DevOps lifecycle is crucial. 

To deliver faster results, developers must be fully aware of all the different phases of the DevOps lifecycle. If they aren’t, the entire development process can become complex and time-consuming.

DevOps lifecycle optimizes development processes from start to end and engages the organization in continuous development, resulting in faster delivery times. This process mainly consists of the following seven stages.

the 7Cs of DevOps lifecycle

 DevOps Life Cycle Phases:

	1. Continuous Development
	2. Continuous Testing
	3. Continuous Integration
	4. Continuous Deployment
	5. Continuous Monitoring
	6. Continuous Feedback
	7. Continuous Operations


1. Continuous Development: (Plan application objectives and Code  requirements)
            
	-In the first phase of DevOps lifecycle, you should plan your application objectives that must be delivered to the customer.
	-This is the phase that involves ‘planning‘ and ‘coding‘ of the software. 
	-The vision of the project is decided during the planning phase and the developers begin 
	  developing the code for the application. 
	-There are no DevOps tools that are required for planning, but there are a number of tools
	  for maintaining the code.
	-Code can be written in any language, but it is maintained by using Version Control System(VCS) tools.

	The  Maintaining the code is referred to as Source Code Management. The most popular tools used are
	 Git,BitBucket,SVN, Mercurial, CVS, and JIRA. Also tools like Ant, Maven, MSBuild ,Gradle can be used in this phase for 
	building/ 	packaging the code into an executable file that can be forwarded to any of the next phases.

	Tools we used in this phase are:
		- Git,Github,BitBucket,Perforce,TFS
		- Management tools like JIRA
		- Build tools like ANT,Maven,MSBuild,Gradle
 
	- When you are developing a large project with a huge number of collaborators(developers), it is very
                    important have communication between the collaborators while making changes in the project.

	Once you are sure of application objectives, start with the project development. 
	It includes activities like code generation and putting the same to the next phase. As DevOps follows the continuous
	development approach, work may carry out on the existing code by using continuous feedback in the development and operation scheme.


2.Continuous Integration: (Plan Tests and Build the product)

	- This stage is the heart of the entire DevOps life cycle.
	
	-  It is a software development practice in which the developers require to commit changes 
	    to the source code more frequently. This may be on a daily or a weekly basis.
		
	- The code supporting new functionality is continuously integrated with the existing code. 
       Since there is continuous development of software, the updated code needs to be integrated continuously as well as smoothly 
	   with the systems to reflect changes to the end-users.
	   
	- The continuous integration process automatically starts after development. 
	
	- It includes several steps like the planning of tests that will be carried out in the next phase, understanding the code to 
	  produce the desired outcome as needed in the initial project documentation. 
	  
	- Continuous integration is the seamless process in DevOps that leads to the next phase in an efficient manner.

	- Jenkins is a very popular tool used in this phase. Whenever there is a change in the Github repository,
                  Jenkins fetches the updated code and it prepares a build of that code which is an executable file in the form of a war or a jar. 
                  This build is then forwarded to the testing server.


3. Continuous Testing : (Verify the product for actual usage in a live environment)

	- Testing process checks the actual use of an application in the DevOps.
	
	- For Continuous testing, automation testing tools like Selenium, TestNG, JUnit, etc are used.
	
	- Selenium does the automation testing, and the reports are generated by TestNG. 
	
	- This entire testing phase can be automated with the help of a Continuous Integration tool called Jenkins. 
	
	- QA team have written a selenium code in Java to test your application. 
	
	- Build Team build this code using ANT or MAVEN/MSBuild/Gradle. Once the code is built, it is tested for 
   	  User Acceptance  Testing (UAT). This entire process can be automated using Jenkins.

	- The testing process gives more information about different aspects of an application that in turn is sent to the development
	   process to improve the application. 

 4. Continuous Deployment : (Ensures product is deployed with maximum accuracy)

	The deployment process is performed in such a way that any changes made in the code should not affect the functioning of high traffic  website.

	-This is the stage where the code is deployed to the production servers. It is also important to ensure that  the code is correctly
   	 deployed  on all the servers. 
	 
	- Configuration Management is the act of establishing and maintaining consistency in an application’s  functional requirements and
	   performance keeping the configurations consistent across all the servers.
	 
	- Since the new code is deployed on a continuous basis, configuration management tools play an important role in executing tasks quickly and frequently.
	- Configuration management tools are Chef,Ansible,SaltStack,Puppet ....
	-Containerization tools also play an equally important role in the deployment stage. Docker and Vagrant are the popular tools used for this purpose. 
	- These tools help produce consistency across Development, Test, Staging and Production environments.
	-Containerization tools help in maintaining consistency across the environments where the application is  developed, tested and deployed. 
	-Using these tools, there is no scope of errors/ failure in the production environment as they package and  replicate the same dependencies
	 and packages used in the development/ testing/ staging environment. 
	-It makes your application easy to run on different computers.

5. Continuous Monitoring: (Monitor the product output and find the problem areas)

	-This is a very crucial stage of the DevOps life cycle where you continuously monitor the performance of your application. 
	-This information is processed to recognize the proper functionality of the application. The system errors such as low memory, server not reachable, etc
                 are resolved in this phase.
	-The root cause of any issue is determined in this phase. It maintains the security and availability of the  services.
	-This practice involves the participation of the Operations team who will monitor the user activity for bugs or any improper behavior of the system. 
	-The popular tools used for this are Splunk, ELK Stack, Nagios, NewRelic. 
	-These tools help you monitor the application’s performance and the servers closely and also enable you  to check the health of the system 
     	  proactively.
	-They can also improve productivity and increase the reliability of the systems, which in turn reduces IT  support costs. 
	-Any major issues if found are reported to the development team so that it can be fixed in the continuous development phase. 
	 This leads to a faster resolution of the problems.

6. Continuous Feedback (Improvise the current product and helps to release new versions quickly)
	-The application performance is improved consistently by analyzing the final outcome of the product. 
	-The continuous feedback is an important phase of the software application where customer feedback is a big asset to improve the working of the current 	 	software product and release new versions quickly based on the response.


	Feedback
		- Bug Fixes
		- Enhancements
		- New Features

7.Continuous operations

The last stage in the DevOps lifecycle is the shortest and easiest to grasp. Continuity is at the heart of all DevOps operations that helps automate release processes, allows developers to detect issues quickly, and build better versions of software products. Continuation is key to eliminate diversions and other extra steps that hinder development.


Tools we used: Kubernetes, DockerSwarm
Container Orchestration Tools.





